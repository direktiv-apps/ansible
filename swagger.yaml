swagger: "2.0"
info:
  description: Run ansible in Direktiv
  title: ansible
  version: "1.0"
  x-direktiv-meta:
    container: gcr.io/direktiv/functions/ansible
    maintainer: |-
      [direktiv.io](https://www.direktiv.io) 
    issues: https://github.com/direktiv-apps/ansible/issues
    url: https://github.com/direktiv-apps/ansible  
    categories:
    - build
    - infrastructure
    license: |-
      [Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)
    long-description: >-
      This function provides Ansible in Direktiv. Ansible version 2.13.3 is installed with the following modules:

      - amazon.aws

      - google.cloud

      - azure.azcollection

      
      The default configuration in `ansible.cfg` can be overwritten with either DirektivFiles or Direktiv variables.


      *Default ansible.cfg*

      ```
      [defaults]

      inventory = hosts

      host_key_checking = False

      ``` 

consumes:
- application/json
produces:
- application/json
schemes:
- http
paths:
  /: 
    delete:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          description: |
            On cancel Direktiv sends a DELETE request to
            the action with id in the header
      x-direktiv:
        cancel: echo 'cancel {{ .DirektivActionID }}'
      responses:
        200:
    post:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          default: development
          description: |
            direktiv action id is an UUID. 
            For development it can be set to 'development'
        - name: Direktiv-TempDir
          in: header
          type: string
          default: /tmp
          description: |
            direktiv temp dir is the working directory for that request
            For development it can be set to e.g. '/tmp'
        - name: body
          in: body
          schema:
            type: object
            properties:
              files:
                type: array
                items:
                  $ref: '#/definitions/direktivFile'
                description: File to create before running commands.
                default: []
              commands:
                type: array
                description: Array of commands.
                items:
                  type: object
                  properties:
                    command:
                      type: string
                      description: Command to run
                    silent: 
                      type: boolean
                      description: If set to false the command will not print output to logs.
                      default: false
                    print: 
                      type: boolean
                      description: If set to false the command will not print the full command with arguments to logs.
                      default: true
                    continue: 
                      type: boolean
                      description: Stops excecution if command fails, otherwise proceeds with next command 
                default: 
                - command: echo Hello
      # direktiv code generation is configured here
      x-direktiv-function: |-
        functions:
        - id: ansible
          image: gcr.io/direktiv/functions/ansible:1.0
          type: knative-workflow
      x-direktiv-examples:
      - title: Playbook with DirektivFiles
        content: |-
          - id: ansible
            type: action
            action:
              function: ansible
              input: 
                files: 
                - name: playbook.yaml
                  data: |
                    ---
                    - name: "Ansible Playbook"
                      hosts: localhost
                      connection: local 
                      tasks:
                      - name: "ls on localhost"
                        shell: "ls -l"
                        register: "output"
                commands:
                - command: ansible-playbook playbook.yaml
      - title: Playbook with variables
        content: |-
          - id: ansible
            type: action
            action:
              function: ansible
              files: 
              - key: playbook.yaml
                scope: workflow
              input:
                commands:
                - command: ansible-playbook playbook.yaml
      - title: Custom ansible.cfg
        content: |-
          - id: ansible
            type: action
            action:
              function: ansible
              files: 
              - key: ansible.cfg
                scope: workflow
              input:
                commands:
                - command: ansible-config view
      x-direktiv:  
        cmds:
        - action: exec
          exec: /config.sh
          print: false
          silent: true
        - action: foreach
          loop: .Commands
          exec: '{{ .Item.Command }}'
          silent: '{{ .Item.Silent }}'
          print: '{{ .Item.Print }}'
          continue: '{{ .Item.Continue }}'
        output: |
          {
            "ansible": {{ index . 1 | toJson }}
          }
      x-direktiv-errors:
        io.direktiv.command.error: Command execution failed
        io.direktiv.output.error: Template error for output generation of the service
        io.direktiv.ri.error: Can not create information object from request
      responses:
        200:
          description: List of executed commands.
          examples:
            ansible:
            - result:   
                custom_stats: {}
                global_custom_stats: {}
                plays:
                - play:
                    duration:
                      end: '2022-08-31T11:55:44.265820Z'
                      start: '2022-08-31T11:55:40.276975Z'
                    id: 1ab65ae3-cbb9-49dc-b739-000000000005
                    name: Ansible Playbook
                  tasks: []
              success: true
            - result: "[defaults]\ninventory = hosts\nhost_key_checking = False"
              success: true
          schema:
            type: object
            properties:
              ansible:
                type: array
                items:
                  type: object
                  required:
                  - success
                  - result
                  properties:
                    success:
                      type: boolean
                    result:
                      additionalProperties: {}
        default:
          description: generic error response
          headers:
            Direktiv-ErrorCode:
              type: string
            Direktiv-ErrorMessage:
              type: string
          schema:
            $ref: "#/definitions/error"
definitions:
  direktivFile:
    type: object
    x-go-type:
      type: DirektivFile
      import:
        package: github.com/direktiv/apps/go/pkg/apps 
  error:
    type: object
    required:
      - errorCode
      - errorMessage
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
